def action =params.Action
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
def ServerFromFile
def mobilehandofftoken_Config_Server
def Sali_Smartsheet_Server =''
def Service_Router_Server =''
def Haproxy_Server =''
def SOM_Server =''
def Phantom_Server =''
def SOM_API =''
def SALI_SMARTSHEET_API =''
def MHT_CONFIG_API =''
def SR_API=''


pipeline {
    agent any

    stages {
		stage('Server Details'){
			steps {
				script{
					println "Fetching data from bitbucket"								
					ServerFromFile = readJSON file: 'Server.json'
					mobilehandofftoken_Config_Server = ServerFromFile.mobilehandofftoken_Config_Server
					Sali_Smartsheet_Server = ServerFromFile.Sali_Smartsheet_Server
					Service_Router_Server =ServerFromFile.Service_Router_Server
					Haproxy_Server = ServerFromFile.Haproxy_Server
					SOM_Server =	ServerFromFile.SOM_Server
					Phantom_Server = ServerFromFile.Phantom_Server
					SOM_API = ServerFromFile.SOM_API
					SALI_SMARTSHEET_API = ServerFromFile.SALI_SMARTSHEET_API
					MHT_CONFIG_API =ServerFromFile.MHT_CONFIG_API
					SR_API =ServerFromFile.SR_API
					println "mobilehandofftoken_Config_Server" + mobilehandofftoken_Config_Server
					println "Sali_Smartsheet_Server" + Sali_Smartsheet_Server
					println "Service_Router_Server" + Service_Router_Server
					println "Haproxy_Server" + Haproxy_Server
					println "SOM_Server" + SOM_Server
					println "Phantom_Server" + Phantom_Server
					println "SOM_API" + SOM_API
					println "SALI_SMARTSHEET_API" + SALI_SMARTSHEET_API
					println "MHT_CONFIG_API" + MHT_CONFIG_API
					println "SR_API" + SR_API
				}	
			}
		}	
		stage('Parallel execution') {
			parallel {				
				stage('mobilehandofftoken and Config') {
					steps {
						script{
							def result =ActionOnMultpileApi(mobilehandofftoken_Config_Server, SALI_SMARTSHEET_API, action)
							
						}
					}      
				}
				stage('SALI and Smarsheet') {
					steps {
						script{
							def result =ActionOnMultpileApi(Sali_Smartsheet_Server, MHT_CONFIG_API, action)
						}
					}      
				}
				stage('Service Router') {
					steps {
						script{
							def result =ActionOnMultpileApi(Sali_Smartsheet_Server, MHT_CONFIG_API, action)
						}
					}      
				}
				stage('Haproxy') {
					steps {
						script{
							println Haproxy_Server
						}
					}      
				}
				stage('SOM') {
					steps {
						script{
							println SOM_Server
						}
					}      
				}
				stage('Phantom') {
					steps {
						script{
							println Phantom_Server
						}
					}      
				}				
			}
		} 
	
    post {
		always {
			println publishResults
			/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
			message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
			spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
			spaceName: 'MamtaKT']]*/
			}
		}

}	
def ActionOnMultpileApi(Object server, Object api, String action ){
	def result ='Success'
	def sshOption="-i ${JENKINS_HOME}/.ssh/id_jenkins_worker_rsa -o StrictHostKeyChecking=no"
	for(s in server) {
		sshCommandLine="ssh ${sshOption} jenkins_worker@${s}"
		for(a in api) 
		{
			println "$sshCommandLine sudo service ${a} ${action}" 
			try{
				//sh "$sshCommandLine sudo service ${a} ${action}"
			}catch(Exception e) 
			{
				println "******** ERROR ********"+e
				result ='Failure'
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
				{
				sh "exit 1"
				}
			}
		}
	}
	return result
}
